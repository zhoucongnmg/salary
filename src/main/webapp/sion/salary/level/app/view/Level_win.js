/*
 * File: app/view/Level_win.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('sion.salary.level.view.Level_win', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.form.Panel',
        'Ext.form.field.Text',
        'Ext.form.FieldSet',
        'Ext.grid.Panel',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.grid.plugin.RowEditing'
    ],

    height: 640,
    width: 900,
    layout: 'fit',
    title: '薪资层次',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 's_icon_table_save',
                            text: '保存',
                            listeners: {
                                click: {
                                    fn: me.onSaveClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'form',
                    bodyPadding: 10,
                    header: false,
                    title: 'My Form',
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            height: 35,
                            itemId: 'name',
                            fieldLabel: '名称',
                            name: 'name'
                        },
                        {
                            xtype: 'fieldset',
                            flex: 1,
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'toolbar',
                                    items: [
                                        {
                                            xtype: 'button',
                                            hidden: true,
                                            itemId: 'btnOk',
                                            text: '确定',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnOkClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            hidden: true,
                                            itemId: 'btnCancel',
                                            text: '取消',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnCancelClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnEdit',
                                            iconCls: 's_icon_action_update',
                                            text: '编辑项目',
                                            listeners: {
                                                click: {
                                                    fn: me.onBtnEditClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnAdd',
                                            iconCls: 's_icon_action_add',
                                            text: '添加等级',
                                            listeners: {
                                                click: {
                                                    fn: me.onAddRowClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnDelete',
                                            margin: '0 0 0 10',
                                            iconCls: 's_icon_cross',
                                            text: '删除等级',
                                            listeners: {
                                                click: {
                                                    fn: me.onDeleteClick,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    flex: 0.2,
                                    hidden: true,
                                    itemId: 'salaryItemNamePanel',
                                    frameHeader: false,
                                    header: false,
                                    title: 'My Panel',
                                    listeners: {
                                        afterrender: {
                                            fn: me.onSalaryItemNamePanelAfterRender,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'gridpanel',
                                    flex: 1,
                                    header: false,
                                    title: 'My Grid Panel',
                                    store: 'LevelItemStore',
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'rank',
                                            text: '等级',
                                            flex: 1,
                                            editor: {
                                                xtype: 'textfield'
                                            }
                                        }
                                    ],
                                    plugins: [
                                        Ext.create('Ext.grid.plugin.RowEditing', {
                                            saveBtnText: '保存',
                                            cancelBtnText: '取消',
                                            listeners: {
                                                edit: {
                                                    fn: me.onRowEditingEdit,
                                                    scope: me
                                                }
                                            }
                                        })
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onWindowAfterRender,
                    scope: me
                },
                beforeclose: {
                    fn: me.onWindowBeforeClose,
                    scope: me
                }
            }
        });

        me.processLevel_win(me);
        me.callParent(arguments);
    },

    processLevel_win: function(config) {

        var fields = [];


        fields.push({name:"id"});
        fields.push({name:"rank"});

        Ext.Ajax.request({
            url:'salary/level/getSalaryItem',
            method:'get',
            timeout:4000,
            async:false,    //不使用异步
            success:function(response, opts){

                var items=Ext.JSON.decode(response.responseText);
                config._salaryItems=items;
                Ext.Array.each(items,function(f){
                    fields.push({"name":f.id,"displayname":f.name});
                });
            },
            failure: function(response, opts) {
                Ext.Msg.alert('提示信息','数据请求错误，请稍候重新尝试获取数据……');
            }
        });


        config.itemModel=Ext.define("sion.salary.level.model.LevelItem", {
            extend:'Ext.data.Model',
            fields:fields
        });
        return config;
    },

    onSaveClick: function(button, e, eOpts) {
        var me=this,
            namespace=me.getNamespace(),
            form=me.down('form'),
            grid=me.down('gridpanel'),
            store=grid.getStore(),
            levelItems=[],
            model =me._record;

        model.set('name',form.down('#name').getValue());
        //set items
        store.each(function(record){
            var item={id:record.data.id===null?"":record.data.id,rank:record.data.rank};
            var salaryItemValues={};

            var keys=Object.keys(model.data.salaryItemNames);
            Ext.Array.each(keys,function(key){
                if(key!=="id" && key !=="rank"){
                    salaryItemValues[key]=record.get(key);
                }
            });





            item.salaryItemValues=salaryItemValues;

            levelItems.push(item);
        });


        if(levelItems.length===0){
           Ext.Msg.alert("提示","薪资层次至少应包含一个级别!");
           return;
        }

        model.set("levelItems",levelItems);



        Ext.Ajax.request({
            url:'salary/level/create',
            method:'POST',
            jsonData:model.data,
            success:function(res){
                var responseData=Ext.JSON.decode(res.responseText);
                if(responseData.success===true){
                    if(me._levelGrid){
                        me._levelGrid.getStore().reload();
                    }
                }
                Ext.Msg.alert("提示",responseData.message);
                button.disabled=false;
                me.close();

            },
            failure:function(form,action){
                Ext.Msg.alert("提示","网络通信异常，请联系管理员");
                button.disabled=false;
            }
        });
    },

    onBtnOkClick: function(button, e, eOpts) {
        var me=this,
            grid=me.down('gridpanel'),
            store=grid.getStore(),
            columns=new Array(),
            cbg=me.down('checkboxgroup'),
            itemNames={};

        //Danymic columns
        Ext.suspendLayouts();

        //把表格中固定的列加到动态模型中
        var cols=grid.columns;
        columns.push({text:'等级',dataIndex:'rank',editor:cols[0].editor,flex:1});


        //根据级别设置的薪资项加入动态模型
        var cbitems = cbg.items;
        for (var i = 0; i < cbitems.length; i++) {
            if (cbitems.items[i].checked) {
                columns.push({text:cbitems.items[i].boxLabel,dataIndex:cbitems.items[i].name,editor:cols[0].editor,flex:1});
                var itemName={};
                itemNames[cbitems.items[i].name]=cbitems.items[i].boxLabel;
            }
        }


        grid.reconfigure(store, columns);
        Ext.resumeLayouts(true);

        me._record.set('salaryItemNames',itemNames);

        var ok=me.down('#btnOk'),
            cancel=me.down('#btnCancel'),
            edit=me.down('#btnEdit'),
            add=me.down('#btnAdd'),
            del=me.down('#btnDelete'),
            panel=me.down('#salaryItemNamePanel');

        edit.show();
        add.show();
        del.show();
        ok.hide();
        cancel.hide();
        panel.hide();

    },

    onBtnCancelClick: function(button, e, eOpts) {
        var me=this,
            ok=me.down('#btnOk'),
            cancel=me.down('#btnCancel'),
            edit=me.down('#btnEdit'),
            add=me.down('#btnAdd'),
            del=me.down('#btnDelete'),
            panel=me.down('#salaryItemNamePanel');

        edit.show();
        add.show();
        del.show();
        ok.hide();
        cancel.hide();
        panel.hide();

    },

    onBtnEditClick: function(button, e, eOpts) {
        var me=this,
            ok=me.down('#btnOk'),
            cancel=me.down('#btnCancel'),
            edit=me.down('#btnEdit'),
            add=me.down('#btnAdd'),
            del=me.down('#btnDelete'),
            panel=me.down('#salaryItemNamePanel');

        edit.hide();
        add.hide();
        del.hide();
        ok.show();
        cancel.show();
        panel.show();
    },

    onAddRowClick: function(button, e, eOpts) {
        var me=this,
            grid=me.down('gridpanel'),
            store=grid.getStore(),
            form=me.down('form');

        var model=Ext.create(me.itemModel);

        store.add(model);
    },

    onDeleteClick: function(button, e, eOpts) {
        var me=this,
            grid=me.down('gridpanel');

        if(grid.getSelectionModel().getCount()===0){
            Ext.Msg.alert("提示","请先选择一条数据!");
            return;
        }

        grid.getStore().remove(grid.getSelectionModel().getSelection());
    },

    onSalaryItemNamePanelAfterRender: function(component, eOpts) {
        var me=this,
            salaryItems=me._salaryItems,
            myCheckboxItems = [];
        var keys=me._record?Object.keys(me._record.data.salaryItemNames):[];
        Ext.Array.each(me._salaryItems,function(salary){
            var checked=false;
            Ext.Array.each(keys,function(k){if(k===salary.id)checked=true;});

            myCheckboxItems.push({
                boxLabel : salary.name,
                name : salary.id,
                checked:checked
            });
        });

        var myCheckboxGroup = new Ext.form.CheckboxGroup({
            itemCls : 'x-check-group-alt',
            columns : 'auto',
            items : myCheckboxItems
        });
        component.add(myCheckboxGroup);

    },

    onRowEditingEdit: function(editor, context, eOpts) {

    },

    onWindowAfterRender: function(component, eOpts) {
        var me=this,
            namespace=me.getNamespace(),
            grid=me.down('gridpanel'),
            store=grid.getStore(),columns=new Array(),
            form=me.down('form');


        //Danymic columns
        Ext.suspendLayouts();

        //把表格中固定的列加到动态模型中
        var cols=grid.columns;
        Ext.Array.each(cols,function(c){
            columns.push({text:c.text,dataIndex:c.dataIndex,editor:c.editor,flex:1});
        });


        //根据级别设置的薪资项加入动态模型
        if(me._record){
            var salaryItemNames=me._record.data.salaryItemNames;
            var keys=Object.keys(salaryItemNames);
            Ext.Array.each(keys,function(k){
                if(k!==""){
                    columns.push({text:salaryItemNames[k],dataIndex:k,editor:cols[0].editor,flex:1});
                }

            });
        }

        grid.reconfigure(store, columns);
        Ext.resumeLayouts(true);

        //set value
        if(me._record){
            form.getForm().setValues(me._record.data);

            var levelItems=me._record.data.levelItems;
            var salaryItemNames=me._record.data.salaryItemNames;
            var keys=Object.keys(salaryItemNames);
            Ext.Array.each(levelItems,function(item){
                var model=Ext.create(me.itemModel);
                model.set("rank",item.rank);

                var salaryItemValues=item.salaryItemValues;

                Ext.Array.each(keys,function(key){
                    model.set(key,salaryItemValues[key]);
                });
                store.add(model);
            });
        }
        else{
            me._record=Ext.create(namespace+'.model.Level');
        }
        //set grid value

    },

    onWindowBeforeClose: function(panel, eOpts) {
        var me=this,
            grid=me.down('gridpanel'),
            store=grid.getStore();
        store.removeAll();
    }

});