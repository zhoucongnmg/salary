/*
 * File: app/view/Salary_main.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('sion.salary.main.view.Salary_main', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'Ext.Img'
    ],

    height: 730,
    itemId: 'SocialEntrance',
    width: 1280,
    layout: 'fit',
    iconCls: 's_icon_org_gear',
    title: '薪资管理',
    maximizable: true,
    minimizable: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    itemId: 'PanelInEntrance',
                    layout: 'border',
                    items: [
                        me.processAutoNav({
                            xtype: 'panel',
                            region: 'west',
                            border: 1,
                            itemId: 'AutoNav',
                            width: 200,
                            layout: 'accordion',
                            bodyBorder: false,
                            title: ''
                        }),
                        {
                            xtype: 'tabpanel',
                            region: 'center',
                            border: 1,
                            itemId: 'MainTabPanel',
                            bodyBorder: false,
                            activeTab: 0,
                            items: [
                                {
                                    xtype: 'panel',
                                    iconCls: 's_icon_item_flag',
                                    title: '首页',
                                    layout: {
                                        type: 'vbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'panel',
                                            height: 300,
                                            layout: 'fit',
                                            items: [
                                                {
                                                    xtype: 'image',
                                                    src: 'sion/salary/main/resources/images/rlzy.jpg'
                                                }
                                            ]
                                        },
                                        {
                                            xtype: 'panel',
                                            flex: 1,
                                            autoScroll: true,
                                            header: false,
                                            items: [
                                                me.processMyPanel16({
                                                    xtype: 'panel',
                                                    height: 400,
                                                    manageHeight: false,
                                                    layout: {
                                                        type: 'table',
                                                        columns: 100
                                                    }
                                                })
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            listeners: {
                beforerender: {
                    fn: me.onEntranceBeforeRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    processAutoNav: function(config) {
        var me = this,
            menus = [],
            myStore = Ext.create(me.getNamespace()+'.store.AutoMenuStore');
        myStore.each(function(obj) {
            var menu = {
                xtype:'menu',
                title:obj.get('title'),
                floating: false,
                iconCls:obj.get('iconCls')
            };
            var menuItems = [];
            obj.get('menuItems').forEach(function(element, index, array){
                var viewName = element.viewName;
                var type=element.type;
                var path = me.getNamespace();
                var menuItem = Ext.create('Ext.menu.Item', {
                    text: element.text,
                    iconCls: element.iconCls,
                    listeners:{
                        click: {
                            fn: function (){
                                    var tabs = me.down('#MainTabPanel');
                                var namespace=element.namespace?element.namespace:me.getNamespace();
                                    var className = namespace+'.view.'+viewName;
                                    var P1 = Ext.ComponentQuery.query('#'+viewName)[0];
                                    if(!P1){
                                        P1 = Ext.create(className);
                                        P1.iconCls = element.iconCls;
                                        P1.title= element.text;
                                        P1.closable = true;
                                        P1.itemId = viewName;

                                        P1.on('beforeclose',function(panel,eOpts){
                                            var tabpanel = panel.up('tabpanel'),
                                                items = tabs.items,
                                                len = items.length,
                                                activeTab = tabpanel.getActiveTab();
                                            for (i = 0; i < len; i++){
                                                //遍历所有打开的tab
                                                var item = items.getAt(i);
                                                if (this == item) {
                                                    //如果找到了当前要关闭的tab
                                                    if (this === activeTab) {
                                                        //如果当前要关闭的tab状态为激活状态 关闭之后activeTab为前一个
                                                        tabpanel.setActiveTab(--i);
                                                        break;
                                                    }
                                                    //其他状态不需要考虑
                                                }
                                            }
                                        });

                                        tabs.add(P1);
                                    }

                                    tabs.setActiveTab(P1);

                            },
                            scope: me
                        }
                    }
                });
                menuItems.push(menuItem);
            });
            menu.items = menuItems;
            menus.push(menu);
        });
        config.items = menus;

        return config;
    },

    processMyPanel16: function(config) {


        var me = this,
            panels = [],
            myStore = Ext.create(me.getNamespace()+'.store.AutoMenuStore');


        myStore.each(function(obj) {

            var title =obj.get('title') ,
                imgSrc = obj.get('imgSrc'),
                menuItems = obj.get('menuItems'),
                iconCls=obj.get('iconCls');

            var itemTplStrArray = [];

            itemTplStrArray.push('<div class="rcb-zt1" style = "height:1000px"> ');
            itemTplStrArray.push('<div class="rcb-dh">');
            itemTplStrArray.push('<div class="rcb-dh-left"><img class="'+iconCls+'" style="width:32px;height:32px;" /></div>');
            itemTplStrArray.push('<div class="rcb-dh-right">'+title+'</div>');
            itemTplStrArray.push('</div>');

            menuItems.forEach(function(element, index, array){

                itemTplStrArray.push('<div class="x-rcb-dh">');
                itemTplStrArray.push('<div class="x-rcb-dh-left"><img class="'+element.iconCls+'" style="width:16px;height:16px;" /></div>');
                itemTplStrArray.push('<div class="x-rcb-dh-right"><a style="text-decoration:none;color:#000000;" href ="javascript:openPanelTab(\''+element.viewName+'\',\''+element.iconCls+'\',\''+element.text+'\',\''+element.namespace+'\')" >'+element.text+'</a></div>');
                itemTplStrArray.push('</div>');
                itemTplStrArray.push('<div class="rcb-nr">'+element.desc+'</div>');

            });

            itemTplStrArray.push('</div>');

            var smlPanel = Ext.create('Ext.panel.Panel',{
                title:null,
                width: '330px',
                items:[
                    {
                        xtype: 'dataview',
                        itemTpl : itemTplStrArray,
                        height: '100%',
                        store: 'AutoMenuStore'
                    }
                ]
            });
            panels.push(smlPanel);

        });

        config.items = panels;

        return config;
    },

    onEntranceBeforeRender: function(component, eOpts) {
        var me = this;
        window.openPanelTab = function(viewName, iconClass, text,namespace) {
            var tabs = component.down('#MainTabPanel');
            var P1 = Ext.ComponentQuery.query('#'+viewName)[0];
            if(!P1){
                P1 = Ext.create((namespace===null?me.getNamespace():namespace)+'.view.'+viewName);
                P1.iconCls = iconClass;
                P1.title= text;
                P1.closable = true;
                P1.itemId = viewName;
                tabs.add(P1);
            }
            tabs.setActiveTab(P1);
        };

    }

});