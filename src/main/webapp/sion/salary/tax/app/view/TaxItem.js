/*
 * File: app/view/TaxItem.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('sion.salary.tax.view.TaxItem', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.form.Panel',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.form.field.Number',
        'Ext.XTemplate'
    ],

    height: 250,
    width: 400,
    layout: 'fit',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    bodyPadding: 10,
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    width: 70,
                                    iconCls: 's_icon_table_save',
                                    text: '保存',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    items: [
                        {
                            xtype: 'numberfield',
                            anchor: '100%',
                            itemId: 'start',
                            fieldLabel: '区段开始值',
                            name: 'start',
                            readOnly: true,
                            allowBlank: false,
                            minValue: 0
                        },
                        {
                            xtype: 'numberfield',
                            anchor: '100%',
                            itemId: 'end',
                            beforeLabelTextTpl: [
                                '<span style="color:red;font-weight:bold" data-qtip="">*</span>'
                            ],
                            fieldLabel: '区段结束值',
                            name: 'end',
                            allowBlank: false,
                            minValue: 0
                        },
                        {
                            xtype: 'numberfield',
                            anchor: '100%',
                            itemId: 'rate',
                            beforeLabelTextTpl: [
                                '<span style="color:red;font-weight:bold" data-qtip="">*</span>'
                            ],
                            fieldLabel: '税率',
                            name: 'rate',
                            allowBlank: false,
                            decimalPrecision: 0,
                            maxValue: 100,
                            minValue: 0,
                            listeners: {
                                change: {
                                    fn: me.onRateChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'numberfield',
                            anchor: '100%',
                            itemId: 'fastNumber',
                            fieldLabel: '速算扣除数',
                            name: 'fastNumber',
                            readOnly: true,
                            allowBlank: false,
                            minValue: 0
                        }
                    ]
                }
            ],
            listeners: {
                beforerender: {
                    fn: me.onWindowBeforeRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onButtonClick: function(button, e, eOpts) {
        var me = this,
            namespace = me.getNamespace(),
            uuid = Ext.create('Ext.data.UuidGenerator'),
            store = me._itemStore,
            id = uuid.generate(),
            form = me.down("form"),
            lastRecord = null, //上一级对象
            item = me._taxItem,
            store = me._itemStore;

        record = form.getRecord();
        form.updateRecord(record);
        if(!me.down('#start').isValid() || !me.down('#end').isValid() ||
           !me.down('#rate').isValid() || !me.down('#fastNumber').isValid()){
            Ext.Msg.alert("提示", "信息不完整，请继续填写！");
            return false;
        }
        if(item){
            //修改
            if(store.getCount() > 1){
                if(store.indexOf(record) > 0){
                    lastRecord = store.getAt(store.indexOf(record) - 1);
                }
            }
        }else{
            //新增
            if(store.getCount() > 0){
                lastRecord = store.last();
            }
        }
        if(lastRecord !== null){
            if(lastRecord.get('rate') >= record.get('rate')){
                Ext.Msg.alert("提示", "税率应大于上一级的税率" + lastRecord.get('rate'));
                return false;
            }
        }

        record.set('rate',Number(Number(record.get('rate')) * 0.01).toFixed(4));
        if(record.get('id') === ''){
            record.set('id', id);
            store.add(record);
        }else{
            if(store.getCount() > 1){
                for(var i = 1; i < store.getCount(); i++){
                    var prev = store.getAt(i - 1);
                    var current = store.getAt(i);
                    var fastNumber = me.countFastNumber(prev.get('end'), prev.get('rate'), prev.get('fastNumber'), parseFloat(current.get('rate'))  * 100);
                    current.set('fastNumber', fastNumber);
                }
            }
        }
        me.close();
    },

    onRateChange: function(field, newValue, oldValue, eOpts) {
        this.setFastNumber();
    },

    onWindowBeforeRender: function(component, eOpts) {
        var me = this,
            namespace = me.getNamespace(),
            form = me.down("form"),
            store = me._itemStore,
            item = me._taxItem,
            start = me._threshold;

        if(item){
            form.loadRecord(item);
            me.down('#rate').setValue(parseFloat(item.get('rate'))  * 100);
        }else{
            if(store.getCount() > 0){
                prev = store.last();
                start = prev.get('end') + 1;
            }
            form.loadRecord(Ext.create(namespace + '.model.TaxItem', {
                id: '',
                start: start,
                end: 0,
                rate: 0,
                fastNumber: 0
            }));
        }
        me.down('#end').setMinValue(me.down('#start').getValue() + 1);
        var record = form.getRecord();
        if(store.getCount() > 0){
            if(store.indexOf(record) > 0){
                //修改，该记录不是第一条记录，所以税率最小值为上一条记录的税率+1
                me.down('#rate').setMinValue(store.getAt(store.indexOf(record) - 1).get('rate') + 1);
            }else if(store.indexOf(record) === 0){
                //修改，该记录是第一条记录，所以税率最小值为0
                me.down('#rate').setMinValue(0);
            }else{
                //新增，税率最后一条记录的税率+1
                me.down('#rate').setMinValue(parseFloat(store.getAt(store.getCount() - 1).get('rate'))  * 100 + 1);
            }
        }
    },

    setFastNumber: function() {
        var me = this,
            form = me.down("form"),
            record = form.getRecord(),
            store = me._itemStore,
            lastRecord = null,
            value = 0;

        if(store.getCount() > 0){
            if(store.indexOf(record) == -1){
                lastRecord = store.last();
            }else{
                if(store.indexOf(record) > 0){
                    lastRecord = store.getAt(store.indexOf(record) - 1);
                }
            }
            if(lastRecord !== null){
                value = me.countFastNumber(lastRecord.get('end'), lastRecord.get('rate'), lastRecord.get('fastNumber'), me.down('#rate').getValue());
                me.down('#fastNumber').setValue(value);
            }
        }
    },

    countFastNumber: function(prevEnd, prevRate, prevFastNumber, rate) {
        var value = 0;

        value = prevEnd * ((rate * 0.01).toFixed(2) - prevRate);
        value = parseFloat(value) + parseFloat(prevFastNumber);
        return value;
    }

});